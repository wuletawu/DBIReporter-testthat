result.htest <- t.test(a.data,b.data)
result.htest
set.seed(1010)
n <- 1000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_less_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
expect_greater_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
set.seed(1010)
n <- 10000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
set.seed(1010)
n <- 100
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
n <- 100000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
result.htest
set.seed(1010)
n <- 10000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
set.seed(1010)
n <- 50000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
result.htest
set.seed(1010)
n <- 40000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
set.seed(1010)
n <- 45000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
set.seed(1010)
n <- 47000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.85
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
result.htest
set.seed(1010)
n <- 47000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
n <- 100
a.mean <- 100
b.mean <- 200
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_less_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
n <- 100
a.mean <- 100
b.mean <- 200
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
n <- 47000
a.mean <- 100
b.mean <- 101
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
set.seed(1010)
n <- 47000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
set.seed(1010)
n <- 47000
a.mean <- 100
b.mean <- 101
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
result.htest
set.seed(1010)
n <- 44000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
set.seed(1010)
n <- 40000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
set.seed(1010)
n <- 47000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
# the t.test p value should be greater than p.expect
# true difference in means is not equal to 0
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test compare data", label='data has good p')
set.seed(1010)
n <- 48000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
set.seed(1010)
n <- 47000
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
set.seed(1010)
n <- 46500
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
#the t.test p value should be less than p.expect
p.expect <- 0.95
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info="t.test meets p requirement.", label='data has good p')
expect_more_than(result.htest$p.value, p.expect, label='data has good p')
checkData.t.test <- function(n, p.expect = 0.95)
{
set.seed(1010)
a.mean <- 100
b.mean <- 100
a.data <- rnorm(n, mean = a.mean)
b.data <- rnorm(n, mean = b.mean)
result.htest <- t.test(a.data,b.data)
expect_more_than(result.htest$p.value, p.expect, info=n)
}
checkData.t.test(47000)
checkData.t.test(40000)
iter <- (1:10)*10000
iter
checkData.t.test(sizes)
apply(sizes, 1, checkData.t.test(sizes))
apply(sizes, 1, checkData.t.test(sizes))
apply(sizes, 1, checkData.t.test
)
sizes <- (1:10)*10000
apply(sizes, 1, checkData.t.test)
apply(sizes, 2, checkData.t.test)
do.call(sizes, checkData.t.test)
do.call('checkData.t.test', list(sizes=sizes))
list(sizes=sizes)
do.call('checkData.t.test', list(n=sizes))
lapply(sizes, checkData.t.test)
sizes <- (1:10)*50000
lapply(sizes, checkData.t.test)
sizes <- (1:10)*60000
lapply(sizes, checkData.t.test)
sizes <- (1:10)*10000
lapply(sizes, checkData.t.test)
checkData.t.test(10000)
checkData.t.test(10000)
checkData.t.test(30000)
checkData.t.test(50000)
checkData.t.test(70000)
checkData.t.test(100000)
require(DBI)
require(RSQLite)
require(testthat)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
str(foo)
test_file("context_testthat.R", rptr)
foo
dbDisconnect(dbh)
library(DBIReporter)
library(DBIReporter)
source('~/src/gitrepo/DBIReporter/tests/testthat/test_testthat_context_db.R', echo=TRUE)
library(DBIReporter)
test_check("DBIReporter")
library(DBIReporter)
devtools::test
test_path
find_test_dir(pkg$path)
require(DBI)
require(RSQLite)
require(testthat)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
dbDisconnect(dbh)
require(DBI)
require(RSQLite)
require(testthat)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
dbDisconnect(dbh)
require(DBI)
require(RSQLite)
# require(testthat)
# require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
##start the context
rptr$start_context('testing first example')
# set the filename
rptr$start_file("starting a file")
# start the test
rptr$start_test("describe the test")
#debugonce(rptr$print.DBIReporter)
#rptr$print.DBIReporter()
# add the result
#build the expectation .. either a successful or failed test.
exp.1 <- expectation(FALSE, 'This is failure', 'this is success')
rptr$add_result(exp.1)
exp.2 <- expectation(TRUE, 'This is failure', 'this is success')
rptr$add_result(exp.2)
# end the test
rptr$end_test()
rptr$end_context()
foo <- dbReadTable(dbh, 'test_info')
foo
dbDisconnect(dbh)
dbDisconnect(dbh)
require(DBI)
require(RSQLite)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
context('testing first example')
get_reporter()$start_file('test_first_simple.R')
#need to create an expectation
expect_that(TRUE, is_false(), "something is wrong",  "Something is so right")
expect_that(TRUE, is_true(), "something is wrong",  "Something is so right")
foo <- dbReadTable(dbh, 'test_info')
foo
dbDisconnect(dbh)
# Test using non-Report class methods.
# this should verify that it'll work when using testthat framework.
require(DBI)
require(RSQLite)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
context('testing first example')
get_reporter()$start_file('test_first_simple.R')
#need to create an expectation
expect_that(TRUE, is_false(), "something is wrong",  "Something is so right")
expect_that(TRUE, is_true(), "something is wrong",  "Something is so right")
foo <- dbReadTable(dbh, 'test_info')
foo
dbDisconnect(dbh)
devtools::test
check_testthat
check_teststhat
pkg
find_test_dir('.')
debugonce(devtools::test)
devtools::test()
require(DBI)
require(RSQLite)
require(testthat)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
require(DBI)
require(RSQLite)
require(testthat)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
require(DBI)
require(RSQLite)
require(testthat)
require(DBIReporter)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
setwd("~/src/gitrepo/DBIReporter/tests/testthat")
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
dbDisconnect(dbh)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
dbh
isConnected(dbh)
dbIsValid(dbh)
expect_true(2=2)
expect_true(2 == 2)
expect_true(2 == 2)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
expect_true(2 == 2)
rptr <- DBIReporter$new(dbh, 'test_info')
set_reporter(rptr)
expect_true(2 == 2)
expect_true(2 == 2, 'something')
expect_true(2 == 2, 'something', 'something else')
get_reporter()
library(DBIReporter)
get_reporter()
old_reporter <- get_reporter()
context("Testing test_file function with DBIReporter")
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
dbIsValid(dbh)
context("Testing test_file function with DBIReporter")
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
expect_true(dbIsValid(dbh), "database handle should be valid")
rptr <- DBIReporter$new(dbh, 'test_info')
old_reporter <- get_reporter()
set_reporter(rptr)
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
test_file
library(DBIReporter)
rptr <- DBIReporter$new(dbh, 'test_info')
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
context("Testing test_file function with DBIReporter")
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
foo
foo %>% summarize(passed = sum(passed))
require(dplyr)
plyr
require(plyr)
install.packages("dplyr")
require(dplyr)
foo %>% summarize(passed = sum(passed))
expect_equal(foo %>% summarize(passed = sum(passed), 3)
)
successSum <- foo %>% summarize(passed = sum(passed)
)
successSum
str(successSum)
successSum$passed
expect_equal(successSum$passed, 3)
require(DBI)
require(RSQLite)
require(testthat)
require(DBIReporter)
#used for test result validation
require(dplyr)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
successSum <- foo %>% summarize(passed = sum(passed))
#Should be three passed test.
expect_equal(successSum$passed, 3)
dbDisconnect(dbh)
#used for test result validation
require(dplyr)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
errorSum <- foo %>% summarize(error = sum(error))
errorSum
skippedSum <- foo %>% summarize(skipped = sum(skipped))
skippedSum
expect_equal(skipSum$skipped, 1)
dbh <- dbConnect(RSQLite::SQLite(), ':memory:')
rptr <- DBIReporter$new(dbh, 'test_info')
test_file("context_testthat.R", rptr)
foo <- dbReadTable(dbh, 'test_info')
successSum <- foo %>% summarize(passed = sum(passed))
#Should be three passed test.
expect_equal(successSum$passed, 3)
# need to test a fail... where the test throws an error.
errorSum <- foo %>% summarize(error = sum(error))
expect_equal(errorSum$error, 1)
skippedSum <- foo %>% summarize(skipped = sum(skipped))
expect_equal(skipSum$skipped, 1)
skippedSum <- foo %>% summarize(skipped = sum(skipped))
expect_equal(skippedSum$skipped, 1)
dbDisconnect(dbh)
setwd("~/src/gitrepo/DBIReporter")
devtools::load_all(".")
getwd()
devtool::
devtools::load_all(".")
